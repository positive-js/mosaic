@import '../core/theming/theming';
@import '../core/styles/typography/typography-utils';

@import '../core/theming/palette';


@mixin _mc-tag-color($main-color, $focus-color, $is-dark-theme) {
    color: map-get($main-color, 500);

    background-color: mc-color($main-color, if($is-dark-theme, 700, 100));

    border-color: mc-color($main-color, if($is-dark-theme, 500, 100));

    &.mc-active,
    &.mc-focused {
        border-color: mc-color($focus-color);
        box-shadow: 0 0 0 1px mc-color($focus-color);
    }

    &.mc-disabled {
        border-color: mix(mc-color($main-color), transparent, 10%);

        color: mix(mc-color($main-color), transparent, 50%);

        background-color: mix(mc-color($main-color), transparent, 10%);
    }

    &:not(.mc-disabled) .mc-icon {
        color: mc-color($main-color, 400);

        &:hover {
            cursor: pointer;
            color: mc-color($main-color, 600);
        }
    }
}

@mixin mc-tag-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark-theme: map-get($theme, is-dark);

    .mc-tag {
        border-color: transparent;

        &.mc-primary {
            @include _mc-tag-color($primary, $primary, $is-dark-theme);
        }

        &.mc-second {
            color: map-get($second, if($is-dark-theme, 60, 500));

            background-color: mc-color($second, if($is-dark-theme, 700, 100));

            &.mc-active,
            &.mc-focused {
                border-color: mc-color($primary);
                box-shadow: 0 0 0 1px mc-color($primary);
            }

            &.mc-disabled {
                background-color: mix(mc-color($second), transparent, 10%);

                color: mix(mc-color($second), transparent, 50%);
            }

            &:not(.mc-disabled) .mc-icon {
                color: mc-color($second, 400);

                &:hover {
                    cursor: pointer;
                    color: mc-color($second, 600);
                }
            }
        }

        &.mc-error {
            @include _mc-tag-color($error, $error, $is-dark-theme);

            @if $is-dark-theme {
                background-color: transparent;
            }
        }

        &:hover:not(.mc-disabled),
        &.mc-hovered:not(.mc-disabled) {
            & .mc-tag-overlay {
                background: mc-color($background, hover);
            }
        }
    }
}

@mixin mc-tag-typography($config) {
    .mc-tag:not(.mc-tag_mono):not(.mc-tag_caps) {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-tag_mono {
        @include mc-typography-level-to-styles($config, caption-mono);
    }

    .mc-tag_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }
}

