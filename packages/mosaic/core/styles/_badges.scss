@import '../../design-tokens/pt-2022/tokens';
@import '../theming/theming';
@import '../styles/typography/typography-utils';


.mc-badge {
    display: inline-flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;

    text-align: center;
    white-space: nowrap;

    border-style: solid;

    box-sizing: border-box;

    &.mc-badge_default {
        height: var(--mc-badge-size-default-height, $badge-size-default-height);
        min-width: var(--mc-badge-size-default-min-width, $badge-size-default-min-width);
        padding: var(--mc-badge-size-default-padding, $badge-size-default-padding);
        border: {
            width: var(--mc-badge-size-default-border-width, $badge-size-default-border-width);
            radius: var(--mc-badge-size-default-border-radius, $badge-size-default-border-radius);
        }
    }

    &.mc-badge_mini {
        height: var(--mc-badge-size-mini-height, $badge-size-mini-height);
        min-width: var(--mc-badge-size-mini-min-width, $badge-size-mini-min-width);
        padding: var(--mc-badge-size-mini-padding, $badge-size-mini-padding);
        border: {
            width: var(--mc-badge-size-mini-border-width, $badge-size-mini-border-width);
            radius: var(--mc-badge-size-mini-border-radius, $badge-size-mini-border-radius);
        }

    }
}


@mixin mc-badge-color($params) {
    color: map-get($params, color);
    border-color: map-get($params, border);
    background: map-get($params, background);
}

@mixin mc-badge-theme($theme) {
    $foreground: map-get($theme, foreground);
    $badge: map-get(map-get($theme, components), badge);

    .mc-badge {
        color: map-get($foreground, text);
        border-color: map-get($foreground, border);
    }

    .mc-badge_solid {
        &.mc-badge_primary {
            @include mc-badge-color(map-get($badge, primary_solid));
        }

        &.mc-badge_second {
            @include mc-badge-color(map-get($badge, second_solid));
        }

        &.mc-badge_transparent {
            @include mc-badge-color(map-get($badge, transparent_solid));
        }

        &.mc-badge_success {
            @include mc-badge-color(map-get($badge, success_solid));
        }

        &.mc-badge_warning {
            @include mc-badge-color(map-get($badge, warning_solid));
        }

        &.mc-badge_error {
            @include mc-badge-color(map-get($badge, error_solid));
        }

        &.mc-badge_light {
            @include mc-badge-color(map-get($badge, light_solid));
        }
    }

    .mc-badge_pastel {
        &.mc-badge_primary {
            @include mc-badge-color(map-get($badge, primary_pastel));
        }

        &.mc-badge_success {
            @include mc-badge-color(map-get($badge, success_pastel));
        }

        &.mc-badge_warning {
            @include mc-badge-color(map-get($badge, warning_pastel));
        }

        &.mc-badge_error {
            @include mc-badge-color(map-get($badge, error_pastel));
        }
    }
}

@mixin mc-badge-typography($config) {
    .mc-badge_default {
        @include mc-typography-level-to-styles($config, $badge-font-default-default);

        &.mc-badge_caps {
            @include mc-typography-level-to-styles($config, $badge-font-default-caps);
        }

        &.mc-badge_mono {
            @include mc-typography-level-to-styles($config, $badge-font-default-mono);
        }
    }

    .mc-badge_mini {
        @include mc-typography-level-to-styles($config, $badge-font-mini-default);

        &.mc-badge_caps {
            @include mc-typography-level-to-styles($config, $badge-font-mini-caps);
        }

        &.mc-badge_mono {
            @include mc-typography-level-to-styles($config, $badge-font-mini-mono);
        }
    }
}
