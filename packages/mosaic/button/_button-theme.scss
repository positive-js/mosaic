@import '../core/styles/typography/typography-utils';
@import '../core/theming/theming';


@mixin mc-button-color($params) {
    color: map-get($params, color);
    border-color: map-get($params, border);
    background: map-get($params, background);

    .mc-icon {
        color: map-get($params, icon);
    }

    &:active:not([disabled]),
    &.mc-active:not([disabled]) {
        border-color: map-get($params, active_border);
        background: map-get($params, active_background);
    }

}

@mixin mc-button_transparent($theme) {
    $background: map-get($theme, background);

    border-color: transparent;
    background-color: transparent;

    &:hover:not([disabled]) {
        background-color: map-get($background, overlay-hover);

        & .mc-button-overlay {
            background-color: transparent;
        }
    }

    &:active:not([disabled]),
    &.mc-active:not([disabled]) {
        border-color: transparent;
        background-color: map-get($background, overlay-active);
        box-shadow: none;

        & .mc-button-overlay {
            background-color: transparent;
        }
    }

    &.mc-disabled,
    &[disabled] {
        border-color: transparent;
    }
}

@mixin mc-button-theme($theme) {
    $background: map-get($theme, background);
    $primary: map-get($theme, primary);

    $button: map-get(map-get($theme, components), button);

    .mc-button-overlay {
        background: transparent;
    }

    .mc-button,
    .mc-icon-button {
        -webkit-font-smoothing: antialiased;

        &.mc-primary {
            @include mc-button-color(map-get($button, primary));

            &.mc-button_transparent {
                @include mc-button_transparent($theme);

                $primary_transparent: map-get($button, primary_transparent);

                color: map-get($primary_transparent, color);

                & .mc-icon {
                    color: map-get($primary_transparent, icon);
                }
            }
        }

        &.mc-second {
            @include mc-button-color(map-get($button, second));

            &.mc-button_transparent {
                @include mc-button_transparent($theme);
            }
        }

        &.mc-error {
            @include mc-button-color(map-get($button, error));

            &.mc-button_transparent {
                @include mc-button_transparent($theme);
            }
        }

        &:hover:not([disabled]) {
            & .mc-button-overlay {
                background: map-get($background, overlay-hover);
            }
        }

        &:active:not([disabled]),
        &.mc-active:not([disabled]) {
            box-shadow: map-get($button, active-shadow);
        }

        &.mc-primary,
        &.mc-second,
        &.mc-error {
            &.cdk-keyboard-focused {
                border-color: map-get(map-get($theme, states), focused-color);
                box-shadow:
                    inset 0 0 0 1px map-get($background, background),
                    0 0 0 1px map-get(map-get($theme, states), focused-color);
            }
        }

        &.mc-disabled,
        &[disabled] {
            opacity: map-get(map-get($theme, states), disabled-opacity);
        }
    }
}

@mixin mc-button-typography($config) {
    .mc-button,
    .mc-icon-button {
        @include mc-typography-level-to-styles($config, $button-font-default);

        &.mc-primary {
            @include mc-typography-level-to-styles($config, $button-font-primary);
        }

        &.mc-primary.mc-button_transparent {
            @include mc-typography-level-to-styles($config, $button-font-primary-transparent);
        }
    }

    .mc-icon-button.mc-button-wrapper {
        .mc-icon {
            line-height: mc-line-height($config, body);
        }
    }
}

