{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { NgZone, EventEmitter, Injectable } from '@angular/core';\n/** Creates a browser MouseEvent with the specified options. */\n// tslint:disable-next-line:no-reserved-keywords\n\nfunction createMouseEvent(type, x = 0, y = 0, button = 0) {\n  const event = document.createEvent('MouseEvent');\n  event.initMouseEvent(type, false, false, window,\n  /* view */\n  0, x,\n  /* screenX */\n  y,\n  /* screenY */\n  x,\n  /* clientX */\n  y,\n  /* clientY */\n  false, false, false, false, button,\n  /* button */\n  null);\n  return event;\n}\n/** Creates a browser TouchEvent with the specified pointer coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\n\n\nfunction createTouchEvent(type, pageX = 0, pageY = 0) {\n  // In favor of creating events that work for most of the browsers, the event is created\n  // as a basic UI Event. The necessary details for the event will be set manually.\n  const event = document.createEvent('UIEvent');\n  const touchDetails = {\n    pageX,\n    pageY\n  };\n  event.initUIEvent(type, true, true, window, 0); // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n  // the touch details.\n\n  Object.defineProperties(event, {\n    touches: {\n      value: [touchDetails]\n    }\n  });\n  return event;\n}\n/** Dispatches a keydown event from an element. */\n// tslint:disable-next-line:no-reserved-keywords\n\n\nfunction createKeyboardEvent(type, keyCode, target, key) {\n  const event = document.createEvent('KeyboardEvent'); // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\n\n  if (event.initKeyEvent) {\n    event.initKeyEvent(type, true, true, window, 0, 0, 0, 0, 0, keyCode);\n  } else {\n    event.initKeyboardEvent(type, true, true, window, 0, key, 0, '', false);\n  } // Webkit Browsers don't set the keyCode when calling the init function.\n  // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\n\n\n  Object.defineProperties(event, {\n    keyCode: {\n      get: () => keyCode\n    },\n    key: {\n      get: () => key\n    },\n    target: {\n      get: () => target\n    }\n  });\n  return event;\n}\n/** Creates a fake event object with any desired event type. */\n// tslint:disable-next-line:no-reserved-keywords\n\n\nfunction createFakeEvent(type, canBubble = false, cancelable = true) {\n  const event = document.createEvent('Event');\n  event.initEvent(type, canBubble, cancelable);\n  return event;\n} // tslint:disable:no-reserved-keywords\n\n/** Utility to dispatch any event on a Node. */\n\n\nfunction dispatchEvent(node, event) {\n  node.dispatchEvent(event);\n  return event;\n}\n/** Shorthand to dispatch a fake event on a specified node. */\n// tslint:disable-next-line:no-reserved-keywords\n\n\nfunction dispatchFakeEvent(node, type, canBubble) {\n  return dispatchEvent(node, createFakeEvent(type, canBubble));\n}\n/** Shorthand to dispatch a keyboard event with a specified key code. */\n\n\nfunction dispatchKeyboardEvent(node, type, keyCode, target) {\n  return dispatchEvent(node, createKeyboardEvent(type, keyCode, target));\n}\n/** Shorthand to dispatch a mouse event on the specified coordinates. */\n\n\nfunction dispatchMouseEvent(node, type, x = 0, y = 0, event = createMouseEvent(type, x, y)) {\n  return dispatchEvent(node, event);\n}\n/** Shorthand to dispatch a touch event on the specified coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\n\n\nfunction dispatchTouchEvent(node, type, x = 0, y = 0) {\n  return dispatchEvent(node, createTouchEvent(type, x, y));\n}\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param value Value to be set on the input.\n * @param element Element onto which to set the value.\n */\n\n\nfunction typeInElement(value, element) {\n  element.focus();\n  element.value = value;\n  dispatchFakeEvent(element, 'input');\n}\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n */\n\n\nfunction patchElementFocus(element) {\n  element.focus = () => dispatchFakeEvent(element, 'focus');\n\n  element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n/**\n * Mock synchronous NgZone implementation that can be used\n * to flush out `onStable` subscriptions in tests.\n *\n * via: https://github.com/angular/angular/blob/master/packages/core/testing/src/ng_zone_mock.ts\n * @docs-private\n */\n\n\nclass MockNgZone extends NgZone {\n  constructor() {\n    super({\n      enableLongStackTrace: false\n    });\n    this.onStable = new EventEmitter(false);\n  }\n\n  run(fn) {\n    // tslint:disable-next-line\n    return fn();\n  }\n\n  runOutsideAngular(fn) {\n    // tslint:disable-next-line\n    return fn();\n  }\n\n  simulateZoneExit() {\n    this.onStable.emit(null);\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nMockNgZone.ɵfac = function MockNgZone_Factory(t) {\n  return new (t || MockNgZone)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nMockNgZone.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MockNgZone,\n  factory: MockNgZone.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockNgZone, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction wrappedErrorMessage(e) {\n  const escapedMessage = e.message.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n  return new RegExp(escapedMessage);\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MockNgZone, createFakeEvent, createKeyboardEvent, createMouseEvent, createTouchEvent, dispatchEvent, dispatchFakeEvent, dispatchKeyboardEvent, dispatchMouseEvent, dispatchTouchEvent, patchElementFocus, typeInElement, wrappedErrorMessage };","map":{"version":3,"sources":["/Users/olegpimenov/Documents/PositiveTechnologies/git/github/mosaic/dist/cdk/fesm2020/ptsecurity-cdk-testing.mjs"],"names":["i0","NgZone","EventEmitter","Injectable","createMouseEvent","type","x","y","button","event","document","createEvent","initMouseEvent","window","createTouchEvent","pageX","pageY","touchDetails","initUIEvent","Object","defineProperties","touches","value","createKeyboardEvent","keyCode","target","key","initKeyEvent","initKeyboardEvent","get","createFakeEvent","canBubble","cancelable","initEvent","dispatchEvent","node","dispatchFakeEvent","dispatchKeyboardEvent","dispatchMouseEvent","dispatchTouchEvent","typeInElement","element","focus","patchElementFocus","blur","MockNgZone","constructor","enableLongStackTrace","onStable","run","fn","runOutsideAngular","simulateZoneExit","emit","ɵfac","ɵprov","wrappedErrorMessage","e","escapedMessage","message","replace","RegExp"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { NgZone, EventEmitter, Injectable } from '@angular/core';\n\n/** Creates a browser MouseEvent with the specified options. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createMouseEvent(type, x = 0, y = 0, button = 0) {\n    const event = document.createEvent('MouseEvent');\n    event.initMouseEvent(type, false, false, window, /* view */ 0, x, /* screenX */ y, /* screenY */ x, /* clientX */ y, /* clientY */ false, false, false, false, button, /* button */ null);\n    return event;\n}\n/** Creates a browser TouchEvent with the specified pointer coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createTouchEvent(type, pageX = 0, pageY = 0) {\n    // In favor of creating events that work for most of the browsers, the event is created\n    // as a basic UI Event. The necessary details for the event will be set manually.\n    const event = document.createEvent('UIEvent');\n    const touchDetails = { pageX, pageY };\n    event.initUIEvent(type, true, true, window, 0);\n    // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n    // the touch details.\n    Object.defineProperties(event, {\n        touches: { value: [touchDetails] }\n    });\n    return event;\n}\n/** Dispatches a keydown event from an element. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createKeyboardEvent(type, keyCode, target, key) {\n    const event = document.createEvent('KeyboardEvent');\n    // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\n    if (event.initKeyEvent) {\n        event.initKeyEvent(type, true, true, window, 0, 0, 0, 0, 0, keyCode);\n    }\n    else {\n        event.initKeyboardEvent(type, true, true, window, 0, key, 0, '', false);\n    }\n    // Webkit Browsers don't set the keyCode when calling the init function.\n    // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\n    Object.defineProperties(event, {\n        keyCode: { get: () => keyCode },\n        key: { get: () => key },\n        target: { get: () => target }\n    });\n    return event;\n}\n/** Creates a fake event object with any desired event type. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createFakeEvent(type, canBubble = false, cancelable = true) {\n    const event = document.createEvent('Event');\n    event.initEvent(type, canBubble, cancelable);\n    return event;\n}\n\n// tslint:disable:no-reserved-keywords\n/** Utility to dispatch any event on a Node. */\nfunction dispatchEvent(node, event) {\n    node.dispatchEvent(event);\n    return event;\n}\n/** Shorthand to dispatch a fake event on a specified node. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction dispatchFakeEvent(node, type, canBubble) {\n    return dispatchEvent(node, createFakeEvent(type, canBubble));\n}\n/** Shorthand to dispatch a keyboard event with a specified key code. */\nfunction dispatchKeyboardEvent(node, type, keyCode, target) {\n    return dispatchEvent(node, createKeyboardEvent(type, keyCode, target));\n}\n/** Shorthand to dispatch a mouse event on the specified coordinates. */\nfunction dispatchMouseEvent(node, type, x = 0, y = 0, event = createMouseEvent(type, x, y)) {\n    return dispatchEvent(node, event);\n}\n/** Shorthand to dispatch a touch event on the specified coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction dispatchTouchEvent(node, type, x = 0, y = 0) {\n    return dispatchEvent(node, createTouchEvent(type, x, y));\n}\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param value Value to be set on the input.\n * @param element Element onto which to set the value.\n */\nfunction typeInElement(value, element) {\n    element.focus();\n    element.value = value;\n    dispatchFakeEvent(element, 'input');\n}\n\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n */\nfunction patchElementFocus(element) {\n    element.focus = () => dispatchFakeEvent(element, 'focus');\n    element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n\n/**\n * Mock synchronous NgZone implementation that can be used\n * to flush out `onStable` subscriptions in tests.\n *\n * via: https://github.com/angular/angular/blob/master/packages/core/testing/src/ng_zone_mock.ts\n * @docs-private\n */\nclass MockNgZone extends NgZone {\n    constructor() {\n        super({ enableLongStackTrace: false });\n        this.onStable = new EventEmitter(false);\n    }\n    run(fn) {\n        // tslint:disable-next-line\n        return fn();\n    }\n    runOutsideAngular(fn) {\n        // tslint:disable-next-line\n        return fn();\n    }\n    simulateZoneExit() {\n        this.onStable.emit(null);\n    }\n}\n/** @nocollapse */ /** @nocollapse */ MockNgZone.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MockNgZone, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ /** @nocollapse */ MockNgZone.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MockNgZone });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MockNgZone, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nfunction wrappedErrorMessage(e) {\n    const escapedMessage = e.message.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n    return new RegExp(escapedMessage);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MockNgZone, createFakeEvent, createKeyboardEvent, createMouseEvent, createTouchEvent, dispatchEvent, dispatchFakeEvent, dispatchKeyboardEvent, dispatchMouseEvent, dispatchTouchEvent, patchElementFocus, typeInElement, wrappedErrorMessage };\n"]},"metadata":{},"sourceType":"module"}