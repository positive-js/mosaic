{"hash":"221848268b2860c81c1a59c53fac5344a3e24224","fesm2020":{"code":"import { QueryList } from '@angular/core';\nimport { A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { tap, debounceTime, filter, map } from 'rxjs/operators';\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        this.previousActiveItemIndex = -1;\n        this._activeItemIndex = -1;\n        this.wrap = false;\n        this.letterKeyStream = new Subject();\n        this.typeaheadSubscription = Subscription.EMPTY;\n        this.vertical = true;\n        this.scrollSize = 0;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this.pressedLetters = [];\n        this.homeAndEnd = false;\n        this.allowedModifierKeys = [];\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this.skipPredicateFn = (item) => item.disabled;\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    // Index of the currently active item.\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    // The active item.\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this.pressedLetters.length > 0;\n    }\n    withScrollSize(scrollSize) {\n        this.scrollSize = scrollSize;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this.allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n    withWrap(shouldWrap = true) {\n        this.wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this.skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this.vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this.horizontal = direction;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200, searchLetterIndex = 0) {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this.typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this.typeaheadSubscription = this.letterKeyStream.pipe(tap((keyCode) => this.pressedLetters.push(keyCode)), debounceTime(debounceInterval), filter(() => this.pressedLetters.length > 0), map(() => this.pressedLetters.join(''))).subscribe((inputString) => {\n            if (searchLetterIndex === -1) {\n                this.pressedLetters = [];\n                return;\n            }\n            const items = this._items.toArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!item.disabled &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === searchLetterIndex) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this.pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this.homeAndEnd = enabled;\n        return this;\n    }\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param item The index of the item to be set as active.\n     */\n    setActiveItem(item) {\n        this.previousActiveItemIndex = this._activeItemIndex;\n        this.updateActiveItem(item);\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    // tslint:disable-next-line:cyclomatic-complexity\n    onKeydown(event) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every((modifier) => {\n            return !event[modifier] || this.allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this.vertical) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this.vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                }\n                else if (this.horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else if (this.horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this.homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this.homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this.letterKeyStream.next(event.key.toLocaleUpperCase());\n                }\n                else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this.letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this.pressedLetters = [];\n        event.preventDefault();\n    }\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive() {\n        this.setActiveItemByIndex(0, 1);\n    }\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive() {\n        this.setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this.setActiveItemByDelta(1);\n    }\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this.wrap ? this.setLastItemActive()\n            : this.setActiveItemByDelta(-1);\n    }\n    setNextPageItemActive(delta = this.scrollSize) {\n        const nextItemIndex = this._activeItemIndex + delta;\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        }\n        else {\n            this.setActiveItemByDelta(delta);\n        }\n    }\n    setPreviousPageItemActive(delta = this.scrollSize) {\n        const nextItemIndex = this._activeItemIndex - delta;\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        }\n        else {\n            this.setActiveItemByDelta(-delta);\n        }\n    }\n    updateActiveItem(item) {\n        const itemArray = this._items.toArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    setActiveItemByDelta(delta) {\n        this.wrap ? this.setActiveInWrapMode(delta) : this.setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    setActiveInWrapMode(delta) {\n        const items = this.getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n            if (!this.skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    setActiveInDefaultMode(delta) {\n        this.setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    setActiveItemByIndex(index, fallbackDelta) {\n        const items = this.getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        let curIndex = index;\n        while (this.skipPredicateFn(items[curIndex])) {\n            curIndex += fallbackDelta;\n            if (!items[curIndex]) {\n                return;\n            }\n        }\n        this.setActiveItem(curIndex);\n    }\n    /** Returns the items as an array. */\n    getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n/* tslint:enable:member-ordering */\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this.origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this.origin = origin;\n        return this;\n    }\n    getFocusOrigin() {\n        return this.origin;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this.origin);\n        }\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager };\n//# sourceMappingURL=ptsecurity-cdk-a11y.mjs.map\n","map":{"version":3,"file":"ptsecurity-cdk-a11y.mjs","sources":["../../../packages/cdk/a11y/key-manager/list-key-manager.ts","../../../packages/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../../packages/cdk/a11y/key-manager/focus-key-manager.ts","../../../packages/cdk/a11y/ptsecurity-cdk-a11y.ts"],"sourcesContent":["import { QueryList } from '@angular/core';\nimport {\n    UP_ARROW,\n    DOWN_ARROW,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    TAB,\n    A,\n    Z,\n    ZERO,\n    NINE,\n    HOME,\n    END\n} from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n\n\n// This interface is for items that can be passed to a ListKeyManager.\n// tslint:disable-next-line naming-convention\nexport interface ListKeyManagerOption {\n    // Whether the option is disabled.\n    disabled?: boolean;\n\n    // Gets the label for this option.\n    getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut: Subject<void> = new Subject<void>();\n\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject<number>();\n\n    previousActiveItemIndex = -1;\n\n    // Index of the currently active item.\n    get activeItemIndex(): number {\n        return this._activeItemIndex;\n    }\n\n    private _activeItemIndex = -1;\n\n    // The active item.\n    get activeItem(): T | null {\n        return this._activeItem;\n    }\n\n    private _activeItem: T;\n\n    private wrap: boolean = false;\n    private letterKeyStream = new Subject<string>();\n    private typeaheadSubscription = Subscription.EMPTY;\n    private vertical = true;\n    private horizontal: 'ltr' | 'rtl' | null;\n\n    private scrollSize: number = 0;\n\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    private pressedLetters: string[] = [];\n\n    private homeAndEnd = false;\n\n    private allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n\n    constructor(private _items: QueryList<T>) {\n        if (_items instanceof QueryList) {\n\n            _items.changes.subscribe((newItems: QueryList<T>) => {\n\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping(): boolean {\n        return this.pressedLetters.length > 0;\n    }\n\n    withScrollSize(scrollSize: number): this {\n        this.scrollSize = scrollSize;\n\n        return this;\n    }\n\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n        this.allowedModifierKeys = keys;\n\n        return this;\n    }\n\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n\n    withWrap(shouldWrap = true): this {\n        this.wrap = shouldWrap;\n\n        return this;\n    }\n\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate: (item: T) => boolean): this {\n        this.skipPredicateFn = predicate;\n\n        return this;\n    }\n\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled: boolean = true): this {\n        this.vertical = enabled;\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n        this.horizontal = direction;\n\n        return this;\n    }\n\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval: number = 200, searchLetterIndex: number = 0): this {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n\n        this.typeaheadSubscription.unsubscribe();\n\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this.typeaheadSubscription = this.letterKeyStream.pipe(\n            tap((keyCode) => this.pressedLetters.push(keyCode)),\n            debounceTime(debounceInterval),\n            filter(() => this.pressedLetters.length > 0),\n            map(() => this.pressedLetters.join(''))\n        ).subscribe((inputString) => {\n            if (searchLetterIndex === -1) {\n                this.pressedLetters = [];\n\n                return;\n            }\n\n            const items = this._items.toArray();\n\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n\n                if (\n                    !item.disabled &&\n                    item.getLabel!().toUpperCase().trim().indexOf(inputString) === searchLetterIndex\n                ) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n\n            this.pressedLetters = [];\n        });\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled: boolean = true): this {\n        this.homeAndEnd = enabled;\n\n        return this;\n    }\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active or item The item to be set as active.\n     */\n    setActiveItem(index: number | T): void;\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param item The index of the item to be set as active.\n     */\n    setActiveItem(item: any): void {\n        this.previousActiveItemIndex = this._activeItemIndex;\n\n        this.updateActiveItem(item);\n\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    // tslint:disable-next-line:cyclomatic-complexity\n    onKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every((modifier) => {\n            return !event[modifier] || this.allowedModifierKeys.indexOf(modifier) > -1;\n        });\n\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                if (this.vertical) {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case UP_ARROW:\n                if (this.vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case RIGHT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case LEFT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case HOME:\n                if (this.homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case END:\n                if (this.homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this.letterKeyStream.next(event.key.toLocaleUpperCase());\n                } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this.letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n\n        this.pressedLetters = [];\n        event.preventDefault();\n    }\n\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive(): void {\n        this.setActiveItemByIndex(0, 1);\n    }\n\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive(): void {\n        this.setActiveItemByIndex(this._items.length - 1, -1);\n    }\n\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive(): void {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this.setActiveItemByDelta(1);\n    }\n\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive(): void {\n        this._activeItemIndex < 0 && this.wrap ? this.setLastItemActive()\n            : this.setActiveItemByDelta(-1);\n    }\n\n    setNextPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex + delta;\n\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        } else {\n            this.setActiveItemByDelta(delta);\n        }\n    }\n\n    setPreviousPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex - delta;\n\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        } else {\n            this.setActiveItemByDelta(-delta);\n        }\n    }\n\n    /**\n     * Allows setting the active without any other effects.\n     * @param index Index of the item to be set as active.\n     */\n    updateActiveItem(index: number): void;\n\n    /**\n     * Allows setting the active item without any other effects.\n     * @param item Item to be set as active or index Index of the item to be set as active..\n     */\n    // tslint:disable-next-line:unified-signatures\n    updateActiveItem(item: number | T): void;\n\n    updateActiveItem(item: any): void {\n        const itemArray = this._items.toArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    private skipPredicateFn = (item: T) => item.disabled;\n\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    private setActiveItemByDelta(delta: number): void {\n        this.wrap ? this.setActiveInWrapMode(delta) : this.setActiveInDefaultMode(delta);\n    }\n\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    private setActiveInWrapMode(delta: number): void {\n        const items = this.getItemsArray();\n\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n\n            if (!this.skipPredicateFn(item)) {\n                this.setActiveItem(index);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    private setActiveInDefaultMode(delta: number): void {\n        this.setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    private setActiveItemByIndex(index: number, fallbackDelta: number): void {\n        const items = this.getItemsArray();\n\n        if (!items[index]) { return; }\n\n        let curIndex = index;\n        while (this.skipPredicateFn(items[curIndex])) {\n            curIndex += fallbackDelta;\n\n            if (!items[curIndex]) { return; }\n        }\n\n        this.setActiveItem(curIndex);\n    }\n\n    /** Returns the items as an array. */\n    private getItemsArray(): T[] {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/* tslint:enable:member-ordering */\n","\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\n// tslint:disable-next-line naming-convention\nexport interface Highlightable extends ListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n    /**\n     * Sets the active item to the item at the specified index and adds the\n     * active styles to the newly active item. Also removes active styles\n     * from the previously active item.\n     * @param index Index of the item to be set as active.\n     */\n    setActiveItem(index: number): void;\n\n    /**\n     * Sets the active item to the item to the specified one and adds the\n     * active styles to the it. Also removes active styles from the\n     * previously active item.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: T): void;\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: any): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n\n        super.setActiveItem(index);\n\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n","import { FocusOrigin } from '@angular/cdk/a11y';\n\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends ListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this.origin = origin;\n\n        return this;\n    }\n\n    getFocusOrigin(): FocusOrigin {\n        return this.origin;\n    }\n\n    /**\n     * Sets the active item or index to the item that is specified and focuses it.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: number | T): void;\n\n    setActiveItem(item: any): void {\n        super.setActiveItem(item);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this.origin);\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;AA+BA;AACA;;;;MAIa,cAAc;IAyCvB,YAAoB,MAAoB;QAApB,WAAM,GAAN,MAAM,CAAc;;;;;QApCxC,WAAM,GAAkB,IAAI,OAAO,EAAQ,CAAC;;QAG5C,WAAM,GAAG,IAAI,OAAO,EAAU,CAAC;QAE/B,4BAAuB,GAAG,CAAC,CAAC,CAAC;QAOrB,qBAAgB,GAAG,CAAC,CAAC,CAAC;QAStB,SAAI,GAAY,KAAK,CAAC;QACtB,oBAAe,GAAG,IAAI,OAAO,EAAU,CAAC;QACxC,0BAAqB,GAAG,YAAY,CAAC,KAAK,CAAC;QAC3C,aAAQ,GAAG,IAAI,CAAC;QAGhB,eAAU,GAAW,CAAC,CAAC;;QAGvB,mBAAc,GAAa,EAAE,CAAC;QAE9B,eAAU,GAAG,KAAK,CAAC;QAEnB,wBAAmB,GAAgC,EAAE,CAAC;;;;;QAiUtD,oBAAe,GAAG,CAAC,IAAO,KAAK,IAAI,CAAC,QAAQ,CAAC;QA9TjD,IAAI,MAAM,YAAY,SAAS,EAAE;YAE7B,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,QAAsB;gBAE5C,IAAI,IAAI,CAAC,WAAW,EAAE;oBAClB,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;oBACrC,MAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAErD,IAAI,QAAQ,GAAG,CAAC,CAAC,IAAI,QAAQ,KAAK,IAAI,CAAC,gBAAgB,EAAE;wBACrD,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;qBACpC;iBACJ;aACJ,CAAC,CAAC;SACN;KACJ;;IA3CD,IAAI,eAAe;QACf,OAAO,IAAI,CAAC,gBAAgB,CAAC;KAChC;;IAKD,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,WAAW,CAAC;KAC3B;;IAqCD,QAAQ;QACJ,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;KACzC;IAED,cAAc,CAAC,UAAkB;QAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,OAAO,IAAI,CAAC;KACf;;;;;IAMD,uBAAuB,CAAC,IAAiC;QACrD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAEhC,OAAO,IAAI,CAAC;KACf;;;;;IAOD,QAAQ,CAAC,UAAU,GAAG,IAAI;QACtB,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QAEvB,OAAO,IAAI,CAAC;KACf;;;;;;IAOD,aAAa,CAAC,SAA+B;QACzC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QAEjC,OAAO,IAAI,CAAC;KACf;;;;;IAMD,uBAAuB,CAAC,UAAmB,IAAI;QAC3C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,OAAO,IAAI,CAAC;KACf;;;;;;IAOD,yBAAyB,CAAC,SAA+B;QACrD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAE5B,OAAO,IAAI,CAAC;KACf;;;;;;IAOD,aAAa,CAAC,mBAA2B,GAAG,EAAE,oBAA4B,CAAC;QACvE,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,EAAE;YACvF,MAAM,KAAK,CAAC,8EAA8E,CAAC,CAAC;SAC/F;QAED,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;;;QAIzC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAClD,GAAG,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EACnD,YAAY,CAAC,gBAAgB,CAAC,EAC9B,MAAM,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,EAC5C,GAAG,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAC1C,CAAC,SAAS,CAAC,CAAC,WAAW;YACpB,IAAI,iBAAiB,KAAK,CAAC,CAAC,EAAE;gBAC1B,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;gBAEzB,OAAO;aACV;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;;;YAIpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACvC,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC;gBACzD,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;gBAE1B,IACI,CAAC,IAAI,CAAC,QAAQ;oBACd,IAAI,CAAC,QAAS,EAAE,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,iBAAiB,EAClF;oBACE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBAC1B,MAAM;iBACT;aACJ;YAED,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;SAC5B,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;KACf;;;;;;IAOD,cAAc,CAAC,UAAmB,IAAI;QAClC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;QAE1B,OAAO,IAAI,CAAC;KACf;;;;;IAYD,aAAa,CAAC,IAAS;QACnB,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAErD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAE5B,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,uBAAuB,EAAE;YACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC3C;KACJ;;;;;;IAOD,SAAS,CAAC,KAAoB;;QAE1B,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAE9B,MAAM,SAAS,GAAgC,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QAC5F,MAAM,iBAAiB,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,QAAQ;YAC/C,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;SAC9E,CAAC,CAAC;QAEH,QAAQ,OAAO;YACX,KAAK,GAAG;gBACJ,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAEnB,OAAO;YAEX,KAAK,UAAU;gBACX,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACf,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBACzB,MAAM;iBACT;qBAAM;oBACH,OAAO;iBACV;YAEL,KAAK,QAAQ;gBACT,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACf,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC7B,MAAM;iBACT;qBAAM;oBACH,OAAO;iBACV;YAEL,KAAK,WAAW;gBACZ,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,EAAE;oBAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBACzB,MAAM;iBACT;qBAAM,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,EAAE;oBAClC,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC7B,MAAM;iBACT;qBAAM;oBACH,OAAO;iBACV;YAEL,KAAK,UAAU;gBACX,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,EAAE;oBAC3B,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC7B,MAAM;iBACT;qBAAM,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,EAAE;oBAClC,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBACzB,MAAM;iBACT;qBAAM;oBACH,OAAO;iBACV;YAEL,KAAK,IAAI;gBACL,IAAI,IAAI,CAAC,UAAU,IAAI,iBAAiB,EAAE;oBACtC,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,MAAM;iBACT;qBAAM;oBACH,OAAO;iBACV;YAEL,KAAK,GAAG;gBACJ,IAAI,IAAI,CAAC,UAAU,IAAI,iBAAiB,EAAE;oBACtC,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBACzB,MAAM;iBACT;qBAAM;oBACH,OAAO;iBACV;YAEL;;;gBAGI,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;oBACrC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,CAAC;iBAC5D;qBAAM,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,MAAM,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC,EAAE;oBAC/E,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;iBAC3D;;;gBAID,OAAO;SACd;QAED,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,KAAK,CAAC,cAAc,EAAE,CAAC;KAC1B;;IAGD,kBAAkB;QACd,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACnC;;IAGD,iBAAiB;QACb,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACzD;;IAGD,iBAAiB;QACb,IAAI,CAAC,gBAAgB,GAAG,CAAC,GAAG,IAAI,CAAC,kBAAkB,EAAE,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;KACxF;;IAGD,qBAAqB;QACjB,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE;cAC3D,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;KACvC;IAED,qBAAqB,CAAC,QAAgB,IAAI,CAAC,UAAU;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAEpD,IAAI,aAAa,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YACrC,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC5B;aAAM;YACH,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;SACpC;KACJ;IAED,yBAAyB,CAAC,QAAgB,IAAI,CAAC,UAAU;QACrD,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAEpD,IAAI,aAAa,IAAI,CAAC,EAAE;YACpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;aAAM;YACH,IAAI,CAAC,oBAAoB,CAAC,CAAC,KAAK,CAAC,CAAC;SACrC;KACJ;IAeD,gBAAgB,CAAC,IAAS;QACtB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACxC,MAAM,KAAK,GAAG,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAExE,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;KACvC;;;;;;IAaO,oBAAoB,CAAC,KAAa;QACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;KACpF;;;;;;IAOO,mBAAmB,CAAC,KAAa;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;YAClF,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YAE1B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;gBAC7B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAE1B,OAAO;aACV;SACJ;KACJ;;;;;;IAOO,sBAAsB,CAAC,KAAa;QACxC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,gBAAgB,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC;KACnE;;;;;;IAOO,oBAAoB,CAAC,KAAa,EAAE,aAAqB;QAC7D,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAEnC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAAE,OAAO;SAAE;QAE9B,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE;YAC1C,QAAQ,IAAI,aAAa,CAAC;YAE1B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;gBAAE,OAAO;aAAE;SACpC;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;KAChC;;IAGO,aAAa;QACjB,OAAO,IAAI,CAAC,MAAM,YAAY,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;KACjF;CACJ;AAED;;MC5ba,0BAA8B,SAAQ,cAAiC;;;;;;IAuBhF,aAAa,CAAC,KAAU;QACpB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;SACvC;QAED,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE3B,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;SACrC;KACJ;;;MCpCQ,eAAmB,SAAQ,cAAoC;IAA5E;;QACY,WAAM,GAAgB,SAAS,CAAC;KA6B3C;;;;;IAvBG,cAAc,CAAC,MAAmB;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,OAAO,IAAI,CAAC;KACf;IAED,cAAc;QACV,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;IAQD,aAAa,CAAC,IAAS;QACnB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAE1B,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtC;KACJ;;;AC5CL;;;;;;"}},"fesm2015":{"code":"import { QueryList } from '@angular/core';\nimport { A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { tap, debounceTime, filter, map } from 'rxjs/operators';\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        this.previousActiveItemIndex = -1;\n        this._activeItemIndex = -1;\n        this.wrap = false;\n        this.letterKeyStream = new Subject();\n        this.typeaheadSubscription = Subscription.EMPTY;\n        this.vertical = true;\n        this.scrollSize = 0;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this.pressedLetters = [];\n        this.homeAndEnd = false;\n        this.allowedModifierKeys = [];\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this.skipPredicateFn = (item) => item.disabled;\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    // Index of the currently active item.\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    // The active item.\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this.pressedLetters.length > 0;\n    }\n    withScrollSize(scrollSize) {\n        this.scrollSize = scrollSize;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this.allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n    withWrap(shouldWrap = true) {\n        this.wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this.skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this.vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this.horizontal = direction;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200, searchLetterIndex = 0) {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this.typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this.typeaheadSubscription = this.letterKeyStream.pipe(tap((keyCode) => this.pressedLetters.push(keyCode)), debounceTime(debounceInterval), filter(() => this.pressedLetters.length > 0), map(() => this.pressedLetters.join(''))).subscribe((inputString) => {\n            if (searchLetterIndex === -1) {\n                this.pressedLetters = [];\n                return;\n            }\n            const items = this._items.toArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!item.disabled &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === searchLetterIndex) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this.pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this.homeAndEnd = enabled;\n        return this;\n    }\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param item The index of the item to be set as active.\n     */\n    setActiveItem(item) {\n        this.previousActiveItemIndex = this._activeItemIndex;\n        this.updateActiveItem(item);\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    // tslint:disable-next-line:cyclomatic-complexity\n    onKeydown(event) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every((modifier) => {\n            return !event[modifier] || this.allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this.vertical) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this.vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                }\n                else if (this.horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else if (this.horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this.homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this.homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this.letterKeyStream.next(event.key.toLocaleUpperCase());\n                }\n                else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this.letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this.pressedLetters = [];\n        event.preventDefault();\n    }\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive() {\n        this.setActiveItemByIndex(0, 1);\n    }\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive() {\n        this.setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this.setActiveItemByDelta(1);\n    }\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this.wrap ? this.setLastItemActive()\n            : this.setActiveItemByDelta(-1);\n    }\n    setNextPageItemActive(delta = this.scrollSize) {\n        const nextItemIndex = this._activeItemIndex + delta;\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        }\n        else {\n            this.setActiveItemByDelta(delta);\n        }\n    }\n    setPreviousPageItemActive(delta = this.scrollSize) {\n        const nextItemIndex = this._activeItemIndex - delta;\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        }\n        else {\n            this.setActiveItemByDelta(-delta);\n        }\n    }\n    updateActiveItem(item) {\n        const itemArray = this._items.toArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    setActiveItemByDelta(delta) {\n        this.wrap ? this.setActiveInWrapMode(delta) : this.setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    setActiveInWrapMode(delta) {\n        const items = this.getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n            if (!this.skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    setActiveInDefaultMode(delta) {\n        this.setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    setActiveItemByIndex(index, fallbackDelta) {\n        const items = this.getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        let curIndex = index;\n        while (this.skipPredicateFn(items[curIndex])) {\n            curIndex += fallbackDelta;\n            if (!items[curIndex]) {\n                return;\n            }\n        }\n        this.setActiveItem(curIndex);\n    }\n    /** Returns the items as an array. */\n    getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n/* tslint:enable:member-ordering */\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this.origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this.origin = origin;\n        return this;\n    }\n    getFocusOrigin() {\n        return this.origin;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this.origin);\n        }\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager };\n//# sourceMappingURL=ptsecurity-cdk-a11y.mjs.map\n","map":{"version":3,"file":"ptsecurity-cdk-a11y.mjs","sources":["../../../packages/cdk/a11y/key-manager/list-key-manager.ts","../../../packages/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../../packages/cdk/a11y/key-manager/focus-key-manager.ts","../../../packages/cdk/a11y/ptsecurity-cdk-a11y.ts"],"sourcesContent":["import { QueryList } from '@angular/core';\nimport {\n    UP_ARROW,\n    DOWN_ARROW,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    TAB,\n    A,\n    Z,\n    ZERO,\n    NINE,\n    HOME,\n    END\n} from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, tap } from 'rxjs/operators';\n\n\n// This interface is for items that can be passed to a ListKeyManager.\n// tslint:disable-next-line naming-convention\nexport interface ListKeyManagerOption {\n    // Whether the option is disabled.\n    disabled?: boolean;\n\n    // Gets the label for this option.\n    getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/* tslint:disable:member-ordering */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    tabOut: Subject<void> = new Subject<void>();\n\n    /** Stream that emits whenever the active item of the list manager changes. */\n    change = new Subject<number>();\n\n    previousActiveItemIndex = -1;\n\n    // Index of the currently active item.\n    get activeItemIndex(): number {\n        return this._activeItemIndex;\n    }\n\n    private _activeItemIndex = -1;\n\n    // The active item.\n    get activeItem(): T | null {\n        return this._activeItem;\n    }\n\n    private _activeItem: T;\n\n    private wrap: boolean = false;\n    private letterKeyStream = new Subject<string>();\n    private typeaheadSubscription = Subscription.EMPTY;\n    private vertical = true;\n    private horizontal: 'ltr' | 'rtl' | null;\n\n    private scrollSize: number = 0;\n\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    private pressedLetters: string[] = [];\n\n    private homeAndEnd = false;\n\n    private allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n\n    constructor(private _items: QueryList<T>) {\n        if (_items instanceof QueryList) {\n\n            _items.changes.subscribe((newItems: QueryList<T>) => {\n\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping(): boolean {\n        return this.pressedLetters.length > 0;\n    }\n\n    withScrollSize(scrollSize: number): this {\n        this.scrollSize = scrollSize;\n\n        return this;\n    }\n\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n        this.allowedModifierKeys = keys;\n\n        return this;\n    }\n\n    /**\n     * Turns on wrapping mode, which ensures that the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     */\n\n    withWrap(shouldWrap = true): this {\n        this.wrap = shouldWrap;\n\n        return this;\n    }\n\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate: (item: T) => boolean): this {\n        this.skipPredicateFn = predicate;\n\n        return this;\n    }\n\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled: boolean = true): this {\n        this.vertical = enabled;\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n        this.horizontal = direction;\n\n        return this;\n    }\n\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param searchLetterIndex letter index for incremental search, if is -1 search is disabled\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval: number = 200, searchLetterIndex: number = 0): this {\n        if (this._items.length && this._items.some((item) => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n\n        this.typeaheadSubscription.unsubscribe();\n\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters and convert those\n        // letters back into a string. Afterwards find the first item that starts with that string and select it.\n        this.typeaheadSubscription = this.letterKeyStream.pipe(\n            tap((keyCode) => this.pressedLetters.push(keyCode)),\n            debounceTime(debounceInterval),\n            filter(() => this.pressedLetters.length > 0),\n            map(() => this.pressedLetters.join(''))\n        ).subscribe((inputString) => {\n            if (searchLetterIndex === -1) {\n                this.pressedLetters = [];\n\n                return;\n            }\n\n            const items = this._items.toArray();\n\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n\n                if (\n                    !item.disabled &&\n                    item.getLabel!().toUpperCase().trim().indexOf(inputString) === searchLetterIndex\n                ) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n\n            this.pressedLetters = [];\n        });\n\n        return this;\n    }\n\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled: boolean = true): this {\n        this.homeAndEnd = enabled;\n\n        return this;\n    }\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param index The index of the item to be set as active or item The item to be set as active.\n     */\n    setActiveItem(index: number | T): void;\n\n    /**\n     * Sets the active item to the item at the index specified.\n     * @param item The index of the item to be set as active.\n     */\n    setActiveItem(item: any): void {\n        this.previousActiveItemIndex = this._activeItemIndex;\n\n        this.updateActiveItem(item);\n\n        if (this._activeItemIndex !== this.previousActiveItemIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    // tslint:disable-next-line:cyclomatic-complexity\n    onKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every((modifier) => {\n            return !event[modifier] || this.allowedModifierKeys.indexOf(modifier) > -1;\n        });\n\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                if (this.vertical) {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case UP_ARROW:\n                if (this.vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case RIGHT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case LEFT_ARROW:\n                if (this.horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                } else if (this.horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case HOME:\n                if (this.homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            case END:\n                if (this.homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                } else {\n                    return;\n                }\n\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this.letterKeyStream.next(event.key.toLocaleUpperCase());\n                } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this.letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n\n        this.pressedLetters = [];\n        event.preventDefault();\n    }\n\n    // Sets the active item to the first enabled item in the list.\n    setFirstItemActive(): void {\n        this.setActiveItemByIndex(0, 1);\n    }\n\n    // Sets the active item to the last enabled item in the list.\n    setLastItemActive(): void {\n        this.setActiveItemByIndex(this._items.length - 1, -1);\n    }\n\n    // Sets the active item to the next enabled item in the list.\n    setNextItemActive(): void {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this.setActiveItemByDelta(1);\n    }\n\n    // Sets the active item to a previous enabled item in the list.\n    setPreviousItemActive(): void {\n        this._activeItemIndex < 0 && this.wrap ? this.setLastItemActive()\n            : this.setActiveItemByDelta(-1);\n    }\n\n    setNextPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex + delta;\n\n        if (nextItemIndex >= this._items.length) {\n            this.setLastItemActive();\n        } else {\n            this.setActiveItemByDelta(delta);\n        }\n    }\n\n    setPreviousPageItemActive(delta: number = this.scrollSize): void {\n        const nextItemIndex = this._activeItemIndex - delta;\n\n        if (nextItemIndex <= 0) {\n            this.setFirstItemActive();\n        } else {\n            this.setActiveItemByDelta(-delta);\n        }\n    }\n\n    /**\n     * Allows setting the active without any other effects.\n     * @param index Index of the item to be set as active.\n     */\n    updateActiveItem(index: number): void;\n\n    /**\n     * Allows setting the active item without any other effects.\n     * @param item Item to be set as active or index Index of the item to be set as active..\n     */\n    // tslint:disable-next-line:unified-signatures\n    updateActiveItem(item: number | T): void;\n\n    updateActiveItem(item: any): void {\n        const itemArray = this._items.toArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    private skipPredicateFn = (item: T) => item.disabled;\n\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    private setActiveItemByDelta(delta: number): void {\n        this.wrap ? this.setActiveInWrapMode(delta) : this.setActiveInDefaultMode(delta);\n    }\n\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    private setActiveInWrapMode(delta: number): void {\n        const items = this.getItemsArray();\n\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n\n            if (!this.skipPredicateFn(item)) {\n                this.setActiveItem(index);\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    private setActiveInDefaultMode(delta: number): void {\n        this.setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    private setActiveItemByIndex(index: number, fallbackDelta: number): void {\n        const items = this.getItemsArray();\n\n        if (!items[index]) { return; }\n\n        let curIndex = index;\n        while (this.skipPredicateFn(items[curIndex])) {\n            curIndex += fallbackDelta;\n\n            if (!items[curIndex]) { return; }\n        }\n\n        this.setActiveItem(curIndex);\n    }\n\n    /** Returns the items as an array. */\n    private getItemsArray(): T[] {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/* tslint:enable:member-ordering */\n","\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\n// tslint:disable-next-line naming-convention\nexport interface Highlightable extends ListKeyManagerOption {\n    // Applies the styles for an active item to this item.\n    setActiveStyles(): void;\n\n    // Applies the styles for an inactive item to this item.\n    setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n    /**\n     * Sets the active item to the item at the specified index and adds the\n     * active styles to the newly active item. Also removes active styles\n     * from the previously active item.\n     * @param index Index of the item to be set as active.\n     */\n    setActiveItem(index: number): void;\n\n    /**\n     * Sets the active item to the item to the specified one and adds the\n     * active styles to the it. Also removes active styles from the\n     * previously active item.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: T): void;\n\n    /**\n     * This method sets the active item to the item at the specified index.\n     * It also adds active styles to the newly active item and removes active\n     * styles from the previously active item.\n     */\n    setActiveItem(index: any): void {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n\n        super.setActiveItem(index);\n\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n","import { FocusOrigin } from '@angular/cdk/a11y';\n\nimport { ListKeyManager, ListKeyManagerOption } from './list-key-manager';\n\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface IFocusableOption extends ListKeyManagerOption {\n    // Focuses the `FocusableOption`. */\n    focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<IFocusableOption & T> {\n    private origin: FocusOrigin = 'program';\n\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin: FocusOrigin): this {\n        this.origin = origin;\n\n        return this;\n    }\n\n    getFocusOrigin(): FocusOrigin {\n        return this.origin;\n    }\n\n    /**\n     * Sets the active item or index to the item that is specified and focuses it.\n     * @param item Item to be set as active.\n     */\n    setActiveItem(item: number | T): void;\n\n    setActiveItem(item: any): void {\n        super.setActiveItem(item);\n\n        if (this.activeItem) {\n            this.activeItem.focus(this.origin);\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}}}