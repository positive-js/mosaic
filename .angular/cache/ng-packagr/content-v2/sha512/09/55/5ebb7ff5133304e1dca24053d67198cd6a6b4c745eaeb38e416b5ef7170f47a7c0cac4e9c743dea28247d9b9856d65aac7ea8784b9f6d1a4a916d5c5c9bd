{"hash":"064549cd472a996aafefcc1fb00f58ef8f78f963","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { NgZone, EventEmitter, Injectable } from '@angular/core';\n\n/** Creates a browser MouseEvent with the specified options. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createMouseEvent(type, x = 0, y = 0, button = 0) {\n    const event = document.createEvent('MouseEvent');\n    event.initMouseEvent(type, false, false, window, /* view */ 0, x, /* screenX */ y, /* screenY */ x, /* clientX */ y, /* clientY */ false, false, false, false, button, /* button */ null);\n    return event;\n}\n/** Creates a browser TouchEvent with the specified pointer coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createTouchEvent(type, pageX = 0, pageY = 0) {\n    // In favor of creating events that work for most of the browsers, the event is created\n    // as a basic UI Event. The necessary details for the event will be set manually.\n    const event = document.createEvent('UIEvent');\n    const touchDetails = { pageX, pageY };\n    event.initUIEvent(type, true, true, window, 0);\n    // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n    // the touch details.\n    Object.defineProperties(event, {\n        touches: { value: [touchDetails] }\n    });\n    return event;\n}\n/** Dispatches a keydown event from an element. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createKeyboardEvent(type, keyCode, target, key) {\n    const event = document.createEvent('KeyboardEvent');\n    // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\n    if (event.initKeyEvent) {\n        event.initKeyEvent(type, true, true, window, 0, 0, 0, 0, 0, keyCode);\n    }\n    else {\n        event.initKeyboardEvent(type, true, true, window, 0, key, 0, '', false);\n    }\n    // Webkit Browsers don't set the keyCode when calling the init function.\n    // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\n    Object.defineProperties(event, {\n        keyCode: { get: () => keyCode },\n        key: { get: () => key },\n        target: { get: () => target }\n    });\n    return event;\n}\n/** Creates a fake event object with any desired event type. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createFakeEvent(type, canBubble = false, cancelable = true) {\n    const event = document.createEvent('Event');\n    event.initEvent(type, canBubble, cancelable);\n    return event;\n}\n\n// tslint:disable:no-reserved-keywords\n/** Utility to dispatch any event on a Node. */\nfunction dispatchEvent(node, event) {\n    node.dispatchEvent(event);\n    return event;\n}\n/** Shorthand to dispatch a fake event on a specified node. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction dispatchFakeEvent(node, type, canBubble) {\n    return dispatchEvent(node, createFakeEvent(type, canBubble));\n}\n/** Shorthand to dispatch a keyboard event with a specified key code. */\nfunction dispatchKeyboardEvent(node, type, keyCode, target) {\n    return dispatchEvent(node, createKeyboardEvent(type, keyCode, target));\n}\n/** Shorthand to dispatch a mouse event on the specified coordinates. */\nfunction dispatchMouseEvent(node, type, x = 0, y = 0, event = createMouseEvent(type, x, y)) {\n    return dispatchEvent(node, event);\n}\n/** Shorthand to dispatch a touch event on the specified coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction dispatchTouchEvent(node, type, x = 0, y = 0) {\n    return dispatchEvent(node, createTouchEvent(type, x, y));\n}\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param value Value to be set on the input.\n * @param element Element onto which to set the value.\n */\nfunction typeInElement(value, element) {\n    element.focus();\n    element.value = value;\n    dispatchFakeEvent(element, 'input');\n}\n\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n */\nfunction patchElementFocus(element) {\n    element.focus = () => dispatchFakeEvent(element, 'focus');\n    element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n\n/**\n * Mock synchronous NgZone implementation that can be used\n * to flush out `onStable` subscriptions in tests.\n *\n * via: https://github.com/angular/angular/blob/master/packages/core/testing/src/ng_zone_mock.ts\n * @docs-private\n */\nclass MockNgZone extends NgZone {\n    constructor() {\n        super({ enableLongStackTrace: false });\n        this.onStable = new EventEmitter(false);\n    }\n    run(fn) {\n        // tslint:disable-next-line\n        return fn();\n    }\n    runOutsideAngular(fn) {\n        // tslint:disable-next-line\n        return fn();\n    }\n    simulateZoneExit() {\n        this.onStable.emit(null);\n    }\n}\n/** @nocollapse */ /** @nocollapse */ MockNgZone.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MockNgZone, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ /** @nocollapse */ MockNgZone.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MockNgZone });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MockNgZone, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nfunction wrappedErrorMessage(e) {\n    const escapedMessage = e.message.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n    return new RegExp(escapedMessage);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MockNgZone, createFakeEvent, createKeyboardEvent, createMouseEvent, createTouchEvent, dispatchEvent, dispatchFakeEvent, dispatchKeyboardEvent, dispatchMouseEvent, dispatchTouchEvent, patchElementFocus, typeInElement, wrappedErrorMessage };\n//# sourceMappingURL=ptsecurity-cdk-testing.mjs.map\n","map":{"version":3,"file":"ptsecurity-cdk-testing.mjs","sources":["../../../packages/cdk/testing/event-objects.ts","../../../packages/cdk/testing/dispatch-events.ts","../../../packages/cdk/testing/type-in-element.ts","../../../packages/cdk/testing/element-focus.ts","../../../packages/cdk/testing/mock-ng-zone.ts","../../../packages/cdk/testing/wrapped-error-message.ts","../../../packages/cdk/testing/ptsecurity-cdk-testing.ts"],"sourcesContent":["/** Creates a browser MouseEvent with the specified options. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function createMouseEvent(type: string, x = 0, y = 0, button = 0) {\n    const event = document.createEvent('MouseEvent');\n\n    event.initMouseEvent(\n        type,\n        false,\n        false,\n        window, /* view */\n        0,\n        x, /* screenX */\n        y, /* screenY */\n        x, /* clientX */\n        y, /* clientY */\n        false,\n        false,\n        false,\n        false,\n        button, /* button */\n        null\n    );\n\n    return event;\n}\n\n/** Creates a browser TouchEvent with the specified pointer coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function createTouchEvent(type: string, pageX = 0, pageY = 0) {\n    // In favor of creating events that work for most of the browsers, the event is created\n    // as a basic UI Event. The necessary details for the event will be set manually.\n    const event = document.createEvent('UIEvent');\n    const touchDetails = { pageX, pageY };\n\n    (event as any).initUIEvent(type, true, true, window, 0);\n\n    // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n    // the touch details.\n    Object.defineProperties(event, {\n        touches: { value: [touchDetails] }\n    });\n\n    return event;\n}\n\n/** Dispatches a keydown event from an element. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function createKeyboardEvent(type: string, keyCode: number, target?: Element, key?: string) {\n    const event = document.createEvent('KeyboardEvent') as any;\n\n    // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\n    if (event.initKeyEvent) {\n        event.initKeyEvent(type, true, true, window, 0, 0, 0, 0, 0, keyCode);\n    } else {\n        event.initKeyboardEvent(type, true, true, window, 0, key, 0, '', false);\n    }\n\n    // Webkit Browsers don't set the keyCode when calling the init function.\n    // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\n    Object.defineProperties(event, {\n        keyCode: { get: () => keyCode },\n        key: { get: () => key },\n        target: { get: () => target }\n    });\n\n    return event;\n}\n\n/** Creates a fake event object with any desired event type. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function createFakeEvent(type: string, canBubble = false, cancelable = true) {\n    const event = document.createEvent('Event');\n    event.initEvent(type, canBubble, cancelable);\n\n    return event;\n}\n","// tslint:disable:no-reserved-keywords\n\nimport {\n    createFakeEvent,\n    createKeyboardEvent,\n    createMouseEvent,\n    createTouchEvent\n} from './event-objects';\n\n\n/** Utility to dispatch any event on a Node. */\nexport function dispatchEvent(node: Node | Window, event: Event): Event {\n    node.dispatchEvent(event);\n\n    return event;\n}\n\n/** Shorthand to dispatch a fake event on a specified node. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function dispatchFakeEvent(node: Node | Window, type: string, canBubble?: boolean): Event {\n    return dispatchEvent(node, createFakeEvent(type, canBubble));\n}\n\n/** Shorthand to dispatch a keyboard event with a specified key code. */\nexport function dispatchKeyboardEvent(node: Node, type: string, keyCode: number, target?: Element):\n    KeyboardEvent {\n    return dispatchEvent(node, createKeyboardEvent(type, keyCode, target)) as KeyboardEvent;\n}\n\n/** Shorthand to dispatch a mouse event on the specified coordinates. */\nexport function dispatchMouseEvent(\nnode: Node, type: string, x = 0, y = 0, event = createMouseEvent(type, x, y)\n): MouseEvent {\n    return dispatchEvent(node, event) as MouseEvent;\n}\n\n/** Shorthand to dispatch a touch event on the specified coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function dispatchTouchEvent(node: Node, type: string, x = 0, y = 0) {\n    return dispatchEvent(node, createTouchEvent(type, x, y));\n}\n","import { dispatchFakeEvent } from './dispatch-events';\n\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param value Value to be set on the input.\n * @param element Element onto which to set the value.\n */\nexport function typeInElement(value: string, element: HTMLInputElement) {\n    element.focus();\n    element.value = value;\n    dispatchFakeEvent(element, 'input');\n}\n","import { dispatchFakeEvent } from './dispatch-events';\n\n\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n */\nexport function patchElementFocus(element: HTMLElement) {\n  element.focus = () => dispatchFakeEvent(element, 'focus');\n  element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n","import { EventEmitter, Injectable, NgZone } from '@angular/core';\n\n\n/**\n * Mock synchronous NgZone implementation that can be used\n * to flush out `onStable` subscriptions in tests.\n *\n * via: https://github.com/angular/angular/blob/master/packages/core/testing/src/ng_zone_mock.ts\n * @docs-private\n */\n@Injectable()\nexport class MockNgZone extends NgZone {\n    onStable: EventEmitter<any> = new EventEmitter(false);\n\n    constructor() {\n        super({enableLongStackTrace: false});\n    }\n\n    run(fn: () => void): any {\n        // tslint:disable-next-line\n        return fn();\n    }\n\n    runOutsideAngular(fn: () => void): any {\n        // tslint:disable-next-line\n        return fn();\n    }\n\n    simulateZoneExit(): void {\n        this.onStable.emit(null);\n    }\n}\n","export function wrappedErrorMessage(e: Error) {\n    const escapedMessage = e.message.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n    return new RegExp(escapedMessage);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { NgZone, EventEmitter, Injectable } from '@angular/core';\n\n/** Creates a browser MouseEvent with the specified options. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createMouseEvent(type, x = 0, y = 0, button = 0) {\n    const event = document.createEvent('MouseEvent');\n    event.initMouseEvent(type, false, false, window, /* view */ 0, x, /* screenX */ y, /* screenY */ x, /* clientX */ y, /* clientY */ false, false, false, false, button, /* button */ null);\n    return event;\n}\n/** Creates a browser TouchEvent with the specified pointer coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createTouchEvent(type, pageX = 0, pageY = 0) {\n    // In favor of creating events that work for most of the browsers, the event is created\n    // as a basic UI Event. The necessary details for the event will be set manually.\n    const event = document.createEvent('UIEvent');\n    const touchDetails = { pageX, pageY };\n    event.initUIEvent(type, true, true, window, 0);\n    // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n    // the touch details.\n    Object.defineProperties(event, {\n        touches: { value: [touchDetails] }\n    });\n    return event;\n}\n/** Dispatches a keydown event from an element. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createKeyboardEvent(type, keyCode, target, key) {\n    const event = document.createEvent('KeyboardEvent');\n    // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\n    if (event.initKeyEvent) {\n        event.initKeyEvent(type, true, true, window, 0, 0, 0, 0, 0, keyCode);\n    }\n    else {\n        event.initKeyboardEvent(type, true, true, window, 0, key, 0, '', false);\n    }\n    // Webkit Browsers don't set the keyCode when calling the init function.\n    // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\n    Object.defineProperties(event, {\n        keyCode: { get: () => keyCode },\n        key: { get: () => key },\n        target: { get: () => target }\n    });\n    return event;\n}\n/** Creates a fake event object with any desired event type. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction createFakeEvent(type, canBubble = false, cancelable = true) {\n    const event = document.createEvent('Event');\n    event.initEvent(type, canBubble, cancelable);\n    return event;\n}\n\n// tslint:disable:no-reserved-keywords\n/** Utility to dispatch any event on a Node. */\nfunction dispatchEvent(node, event) {\n    node.dispatchEvent(event);\n    return event;\n}\n/** Shorthand to dispatch a fake event on a specified node. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction dispatchFakeEvent(node, type, canBubble) {\n    return dispatchEvent(node, createFakeEvent(type, canBubble));\n}\n/** Shorthand to dispatch a keyboard event with a specified key code. */\nfunction dispatchKeyboardEvent(node, type, keyCode, target) {\n    return dispatchEvent(node, createKeyboardEvent(type, keyCode, target));\n}\n/** Shorthand to dispatch a mouse event on the specified coordinates. */\nfunction dispatchMouseEvent(node, type, x = 0, y = 0, event = createMouseEvent(type, x, y)) {\n    return dispatchEvent(node, event);\n}\n/** Shorthand to dispatch a touch event on the specified coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nfunction dispatchTouchEvent(node, type, x = 0, y = 0) {\n    return dispatchEvent(node, createTouchEvent(type, x, y));\n}\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param value Value to be set on the input.\n * @param element Element onto which to set the value.\n */\nfunction typeInElement(value, element) {\n    element.focus();\n    element.value = value;\n    dispatchFakeEvent(element, 'input');\n}\n\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n */\nfunction patchElementFocus(element) {\n    element.focus = () => dispatchFakeEvent(element, 'focus');\n    element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n\n/**\n * Mock synchronous NgZone implementation that can be used\n * to flush out `onStable` subscriptions in tests.\n *\n * via: https://github.com/angular/angular/blob/master/packages/core/testing/src/ng_zone_mock.ts\n * @docs-private\n */\nclass MockNgZone extends NgZone {\n    constructor() {\n        super({ enableLongStackTrace: false });\n        this.onStable = new EventEmitter(false);\n    }\n    run(fn) {\n        // tslint:disable-next-line\n        return fn();\n    }\n    runOutsideAngular(fn) {\n        // tslint:disable-next-line\n        return fn();\n    }\n    simulateZoneExit() {\n        this.onStable.emit(null);\n    }\n}\n/** @nocollapse */ /** @nocollapse */ MockNgZone.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MockNgZone, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ /** @nocollapse */ MockNgZone.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MockNgZone });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MockNgZone, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nfunction wrappedErrorMessage(e) {\n    const escapedMessage = e.message.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n    return new RegExp(escapedMessage);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MockNgZone, createFakeEvent, createKeyboardEvent, createMouseEvent, createTouchEvent, dispatchEvent, dispatchFakeEvent, dispatchKeyboardEvent, dispatchMouseEvent, dispatchTouchEvent, patchElementFocus, typeInElement, wrappedErrorMessage };\n//# sourceMappingURL=ptsecurity-cdk-testing.mjs.map\n","map":{"version":3,"file":"ptsecurity-cdk-testing.mjs","sources":["../../../packages/cdk/testing/event-objects.ts","../../../packages/cdk/testing/dispatch-events.ts","../../../packages/cdk/testing/type-in-element.ts","../../../packages/cdk/testing/element-focus.ts","../../../packages/cdk/testing/mock-ng-zone.ts","../../../packages/cdk/testing/wrapped-error-message.ts","../../../packages/cdk/testing/ptsecurity-cdk-testing.ts"],"sourcesContent":["/** Creates a browser MouseEvent with the specified options. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function createMouseEvent(type: string, x = 0, y = 0, button = 0) {\n    const event = document.createEvent('MouseEvent');\n\n    event.initMouseEvent(\n        type,\n        false,\n        false,\n        window, /* view */\n        0,\n        x, /* screenX */\n        y, /* screenY */\n        x, /* clientX */\n        y, /* clientY */\n        false,\n        false,\n        false,\n        false,\n        button, /* button */\n        null\n    );\n\n    return event;\n}\n\n/** Creates a browser TouchEvent with the specified pointer coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function createTouchEvent(type: string, pageX = 0, pageY = 0) {\n    // In favor of creating events that work for most of the browsers, the event is created\n    // as a basic UI Event. The necessary details for the event will be set manually.\n    const event = document.createEvent('UIEvent');\n    const touchDetails = { pageX, pageY };\n\n    (event as any).initUIEvent(type, true, true, window, 0);\n\n    // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n    // the touch details.\n    Object.defineProperties(event, {\n        touches: { value: [touchDetails] }\n    });\n\n    return event;\n}\n\n/** Dispatches a keydown event from an element. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function createKeyboardEvent(type: string, keyCode: number, target?: Element, key?: string) {\n    const event = document.createEvent('KeyboardEvent') as any;\n\n    // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\n    if (event.initKeyEvent) {\n        event.initKeyEvent(type, true, true, window, 0, 0, 0, 0, 0, keyCode);\n    } else {\n        event.initKeyboardEvent(type, true, true, window, 0, key, 0, '', false);\n    }\n\n    // Webkit Browsers don't set the keyCode when calling the init function.\n    // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\n    Object.defineProperties(event, {\n        keyCode: { get: () => keyCode },\n        key: { get: () => key },\n        target: { get: () => target }\n    });\n\n    return event;\n}\n\n/** Creates a fake event object with any desired event type. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function createFakeEvent(type: string, canBubble = false, cancelable = true) {\n    const event = document.createEvent('Event');\n    event.initEvent(type, canBubble, cancelable);\n\n    return event;\n}\n","// tslint:disable:no-reserved-keywords\n\nimport {\n    createFakeEvent,\n    createKeyboardEvent,\n    createMouseEvent,\n    createTouchEvent\n} from './event-objects';\n\n\n/** Utility to dispatch any event on a Node. */\nexport function dispatchEvent(node: Node | Window, event: Event): Event {\n    node.dispatchEvent(event);\n\n    return event;\n}\n\n/** Shorthand to dispatch a fake event on a specified node. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function dispatchFakeEvent(node: Node | Window, type: string, canBubble?: boolean): Event {\n    return dispatchEvent(node, createFakeEvent(type, canBubble));\n}\n\n/** Shorthand to dispatch a keyboard event with a specified key code. */\nexport function dispatchKeyboardEvent(node: Node, type: string, keyCode: number, target?: Element):\n    KeyboardEvent {\n    return dispatchEvent(node, createKeyboardEvent(type, keyCode, target)) as KeyboardEvent;\n}\n\n/** Shorthand to dispatch a mouse event on the specified coordinates. */\nexport function dispatchMouseEvent(\nnode: Node, type: string, x = 0, y = 0, event = createMouseEvent(type, x, y)\n): MouseEvent {\n    return dispatchEvent(node, event) as MouseEvent;\n}\n\n/** Shorthand to dispatch a touch event on the specified coordinates. */\n// tslint:disable-next-line:no-reserved-keywords\nexport function dispatchTouchEvent(node: Node, type: string, x = 0, y = 0) {\n    return dispatchEvent(node, createTouchEvent(type, x, y));\n}\n","import { dispatchFakeEvent } from './dispatch-events';\n\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param value Value to be set on the input.\n * @param element Element onto which to set the value.\n */\nexport function typeInElement(value: string, element: HTMLInputElement) {\n    element.focus();\n    element.value = value;\n    dispatchFakeEvent(element, 'input');\n}\n","import { dispatchFakeEvent } from './dispatch-events';\n\n\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n */\nexport function patchElementFocus(element: HTMLElement) {\n  element.focus = () => dispatchFakeEvent(element, 'focus');\n  element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n","import { EventEmitter, Injectable, NgZone } from '@angular/core';\n\n\n/**\n * Mock synchronous NgZone implementation that can be used\n * to flush out `onStable` subscriptions in tests.\n *\n * via: https://github.com/angular/angular/blob/master/packages/core/testing/src/ng_zone_mock.ts\n * @docs-private\n */\n@Injectable()\nexport class MockNgZone extends NgZone {\n    onStable: EventEmitter<any> = new EventEmitter(false);\n\n    constructor() {\n        super({enableLongStackTrace: false});\n    }\n\n    run(fn: () => void): any {\n        // tslint:disable-next-line\n        return fn();\n    }\n\n    runOutsideAngular(fn: () => void): any {\n        // tslint:disable-next-line\n        return fn();\n    }\n\n    simulateZoneExit(): void {\n        this.onStable.emit(null);\n    }\n}\n","export function wrappedErrorMessage(e: Error) {\n    const escapedMessage = e.message.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n    return new RegExp(escapedMessage);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}}}